Grammar


	/* performs math on numbers */
	/* DATA: sum of rolls */
	/* STRUCT: OP(I|E|S:loperand, I|E|S:roperand) - operation to perform on operands */
	/* STRUCT: I(i:num) - create an integer */
	/* STRUCT: E(AST:sym) - the ast the symbol represents */
	/* STRUCT: S(R|r|Q|F:roll) - operation to sum all rolls and produce an int */
math: math CMP math											{ $$ = OP($1, $3) 		; $$ = CMP($1, $3) }
	|   math '+' math											{ $$ = OP($1, $3) 		; $$ = +($1, $3) }
	|   math '-' math											{ $$ = OP($1, $3) 		; $$ = -($1, $3) }
	|   math '*' math											{ $$ = OP($1, $3) 		; $$ = *($1, $3) }
	|   math DIV math											{ $$ = OP($1, $3) 		; $$ = /($!, $3) }
	|   math '%' math											{ $$ = OP($1, $3) 		; $$ = %($1, $3) }
	|   math '^' math											{ $$ = OP($1, $3) 		; $$ = ^($1, $3) }
	|   '-' math 				%prec UMINUS			{ $$ = OP($2, NULL) 	; $$ = M($1) }
	|   NUM       												{ $$ = I($1) 					; $$ = I($1) }
	|   IDENT															{ $$ = E($1) 					; $$ = C(lookup($1)) }
	|   dice															{ $$ = S($1) 					; $$ = ∑ x ∊ $1 | x }

	/* performs math on multiple die's rolls */
	/* DATA: individual rolls */
	/* STRUCT: OP(R|r|Q|F:loperand, R|r|Q|F:roperand) - operation to perform on operands */
dice: dice '&' dice											{ $$ = OP($1, $2)	; $$ = $1 ∪ {∀ e ∊ $3 ⋅ e ∊ $1 ∩ $3 | e} }
	|   dice '|' dice											{ $$ = OP($1, $2)	; $$ = $1 ∪ {∀ e ∊ $3 ⋅ e ∊ $1 ∪ $3 | e} }
	|   dice INTER dice										{ $$ = OP($1, $2)	; $$ = ∅ ∪ {∀ e ∊ $3 ⋅ e ∊ $1 ∩ $3 ∧ e ∉ added | e} }
	|   dice UNION dice										{ $$ = OP($1, $2)	; $$ = ∅ ∪ {∀ e ∊ $3 ⋅ e ∊ $1 ∪ $3 ∧ e ∉ added | e} }
	|   func															{ $$ = $1					; $$ = $1 }

	/* performs math on a single die rolls */
	/* DATA: individual rolls, die faces */
	/* STRUCT: R(D:die) - operation to roll a natural die */
	/* STRUCT: r(d:die) - operation to roll a set die */
	/* STRUCT: Q(V:result) - operation to create a 'roll' from a set result */
	/* STRUCT: F(R|r|Q:rolls,i:ftype,i:stype,i:times) - operation to perform a function on a result */
func: ndie															{ $$ := R($1)						; $$ = $1 }
	|		sdie															{	$$ := r($1)						; }
	|   '[' list ']'											{ $$ := Q($2) 					; $$ = dieset($2) }
	|		func FUNC SELECT									{ $$ := F($2,$3,$1,-1)	; $$ = $2($1, $3) }
	|   func FUNC SELECT QUANT						{ $$ := F($2,$3,$1,$4)	; $$ = $2_1^$4($1, $3) }
	|   func FUNC SELECT NUM XQUANT				{ $$ := F($2,$3,$1,$4)	; $$ = $2_1^$4($1, $3) }
	|   func FUNC NUM											{ $$ := F($2,$3,$1,-1)	; $$ = $2($1, $3) }
	|   func FUNC NUM QUANT								{ $$ := F($2,$3,$1,$4)	; $$ = $2_1^[$4]($1, $3) }
	|   func FUNC NUM NUM XQUANT					{ $$ := F($2,$3,$1,$4)	; $$ = $2_1^$4($1, $3) }

	/* a natural die roll */
	/* DATA: face numbers, length of face numbers, number of rolls */
	/* STRUCT: D(i:count,i:min,i:max) - describe a virtual die roll */
ndie: DNUM 'd' NUM											{ $$ = D(1, $3, $1) 	; $$ = [] ∪ [⋃ x ∊ [1,$3] | x]^$1 }
	|   DNUM 'd' '{' math RANGE math '}'	{ $$ = D($4, $6, $1) 	; $$ = [] ∪ [⋃ x ∊ [$4, $6] | x]^$1 }
	|   'd' NUM														{ $$ = D(1, $2, 1) 		; $$ = [] ∪ [⋃ x ∊ [1,$3] | x] }
	|   'd' '{' math RANGE math '}'				{ $$ = D($3, $5, 1) 	; $$ = [] ∪ [⋃ x ∊ [$4, $6] | x] }


	/* a set die roll */
	/* STRUCT: d(V:faces,i:count) - describe a die with specific faces */
sdie: DNUM 'd' '{' list '}'							{ $$ = d($4, $1) 			; $$ = [] ∪ [⋃ x ∊ $4 | x]^$1 }
	|   'd' '{' list '}'									{ $$ = d($3, $1)  		; $$ = [] ∪ [⋃ x ∊ $4 | x] }


	/* creates a list of values */
	/* DATA: value chain */
	/* STRUCT: V(i:num,V?:prev) - chain values together */
list: NUM																{ $$ = V($1, NULL) 		; $$ = {$1} }
	|		NUM ',' list											{ $$ = V($3, $1)			; $$ = $1 ∪ $3 }

	/* performs top-level actions */
start:
	| 	start stmt EOL										{ printf(eval($2)) }
	|   start IDENT ':' stmt EOL					{ $2 ::= $4 }
	|   start error EOL										{ printf('error') }
	|   start EOL													{  }

FUNC:		'drop'
	|			'append'
	|			'choose'
	|			'reroll'
	|			'count'

SELECT: 'highest'
	| 		'lowest'
	| 		'random'
	| 		'unique'
	| 		'all'

QUANT = 'once'
	| 		'twice'
	| 		'thrice'

XQUANT = 'times'
	|			 'time'

operators 	: + # add roll result
						| - # subtract roll result
						| * # multiply roll result
						| // # integer divide roll result
						| % # modulo roll result
						| ^ # exponentiate result
						| && # set-wise intersection of dice set (factor duplicates)
						| || # set-wise union of dice set (keep duplicates)
						| & # element-wise intersection of dice set (eliminate duplicates)
						| | # element-wise union of dice set (eliminate duplicates)
						| =  # equality check roll result ([0] or [1] result)
						| != # inequality check roll result ([0] or [1] result)
						| >  # greater than check roll result ([0] or [1] result)
						| <  # lesser than check roll result ([0] or [1] result)
						| >= # greater than or equal to check roll result ([0] or [1] result)
						| <= # lesser than or equal to roll result ([0] or [1] result)

precidence:
	lo	=, !=, >, <, >=, <=
			+, -
			*, //, %
			^
			&&, ||
	hi	&, |

comments:		block style with '\'
