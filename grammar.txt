Grammar


	/* performs math on numbers */
	/* DATA: sum of rolls */
math: math CMP math											{ $$ = $1 CMP $3 }
	|   math '+' math											{ $$ = $1 + $3 }
	|   math '-' math											{ $$ = $1 - $3 }
	|   math '*' math											{ $$ = $1 * $3 }
	|   math DIV math											{ $$ = $1 / $3 }
	|   math '%' math											{ $$ = $1 % $3 }
	|   math '^' math											{ $$ = $1 ^ $3 }
	|   '-' math 				%prec UMINUS			{ $$ = -$1 }
	|   NUM       												{ $$ = $1 }
	|   dice															{ $$ = ∑ x ∊ $1 | x }

	/* performs math on multiple die's rolls */
	/* DATA: individual rolls */
dice: dice '&' dice											{ $$ = $1 ∪ {∀ e ∊ $1 ∩ $3 | $1 ∪ e} }
	|   dice '|' dice											{ $$ = $1 ∪ {∀ e ∊ $1 ∪ $3 | $1 ∪ e} }
	|   dice INTER dice										{ $$ = ∅ ∪ {∀ e ∊ $1 ∩ $3 | e} }
	|   dice UNION dice										{ $$ = ∅ ∪ {∀ e ∊ $1 ∪ $3 | e} }
	|   func															{ $$ = {$1} }

	/* performs math on a single die rolls */
	/* DATA: individual rolls, die faces + count */
func: die																{ $$ = $1 }
	|		func FUNC SELECT									{ $$ = $2($1, $3) }
	|   func FUNC SELECT QUANT						{ $$ = $2_1^$4($1, $3) }
	|   func FUNC NUM											{ $$ = $2($1, $3) }
	|   func FUNC NUM QUANT								{ $$ = $2_1^[$4]($1, $3) }

	/* performs a die roll */
	/* DATA: individual rolls, die faces + count */
die:  DNUM 'd' NUM											{ $$ = [] ∪ [⋃ x ∊ [1,$3] | x]^$1 }
	|   DNUM 'd' '{' list '}'							{ $$ = [] ∪ [⋃ x ∊ $4 | x]^$1 }
	|   DNUM 'd' '{' math RANGE math '}'	{ $$ = [] ∪ [⋃ x ∊ [$4, $6] | x]^$1 }
	|   'd' NUM														{ $$ = [] ∪ [⋃ x ∊ [1,$3] | x] }
	|   'd' '{' list '}'									{ $$ = [] ∪ [⋃ x ∊ $4 | x] }
	|   'd' '{' math RANGE math '}'				{ $$ = [] ∪ [⋃ x ∊ [$4, $6] | x] }
	|   '[' list ']'											{ $$ = $2 }
	|   '['  ']'													{ $$ = [] }
	|   IDENT															{ $$ = $1 }

	/* creates a list of values */
	/* DATA: die faces + count */
list: math															{ $$ = $1 }
	|		math ',' list											{ $$ = $1 ∪ $3 }

	/* performs top-level actions */
start:
	| 	start stmt EOL										{ printf(eval($2)) }
	|   start IDENT ':' stmt EOL					{ $2 ::= $4 }
	|   start error EOL										{ printf('error') }
	|   start EOL													{  }

FUNC:		'drop'
	|			'append'
	|			'choose'
	|			'reroll'
	|			'count'

SELECT: 'highest'
	| 		'lowest'
	| 		'random'
	| 		'unique'
	| 		'all'

QUANT = 'once'
	| 		'twice'
	| 		'thrice'
	| 		NUM 'times'

operators 	: + # add roll result
						| - # subtract roll result
						| * # multiply roll result
						| // # integer divide roll result
						| % # modulo roll result
						| ^ # exponentiate result
						| && # set-wise intersection of dice set (factor duplicates)
						| || # set-wise union of dice set (keep duplicates)
						| & # element-wise intersection of dice set (eliminate duplicates)
						| | # element-wise union of dice set (eliminate duplicates)
						| =  # equality check roll result ([0] or [1] result)
						| != # inequality check roll result ([0] or [1] result)
						| >  # greater than check roll result ([0] or [1] result)
						| <  # lesser than check roll result ([0] or [1] result)
						| >= # greater than or equal to check roll result ([0] or [1] result)
						| <= # lesser than or equal to roll result ([0] or [1] result)

precidence:
	lo	=, !=, >, <, >=, <=
			+, -
			*, //, %
			^
			&&, ||
	hi	&, |

comments:		block style with '\'
