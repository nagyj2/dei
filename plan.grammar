Grammar

	/* performs top-level actions */
line:		line stmt EOL											<<  >>
	|   	line EOL													<<  >>
	|   	line error EOL										<<  >>
	|																				<<  >>
	|			line '@' stmt EOL									<<  >>
	|   	line '@' EOL											<<  >>
	|			line '@' error EOL								<<  >>
	|			'@'																<<  >>

	/* perform higher level operations */
stmt:		group															<< $$ = $1 >>
	|			IDENT ':' cond										<< $$ = A($1, $3) >>
	|			IDENT '=' cond										<< $$ = eval($3) >>

group:	cond															<< $$ = newDamage(D_none, $1, NULL) >>
	|			cond DAMAGE												<< $$ = newDamage(		$2,	$1, NULL) >>
	|			cond DAMAGE group									<< $$ = newDamage(		$2,	$1,   $3) >>

	/* Allow conditionals */
cond:		math															<< $$ = $1 >>
	|			math '?' math	';' math						<< $$ = ($1) ? $3 : 0 >>
	|			math '?' math											<< $$ = ($1) ? $3 : 0 >>

	/* performs math on integers */
math: 	math '+' math											<< $$ = $1 + $3 >>
	|   	math '-' math											<< $$ = $1 - $3 >>
	|   	math '*' math											<< $$ = $1 * $3 >>
	|   	math '//' math										<< $$ = (int) ($1 / $3) >>
	|   	math '%' math											<< $$ = $1 % $3 >>
	|   	math '^' math											<< $$ = (int) ($1 ** $3) >>
	|   	math '==' math										<< $$ = ($1 == $3) ? 1 : 0 >>
	|   	math '!=' math										<< $$ = ($1 != $3) ? 1 : 0 >>
	|   	math '>' math											<< $$ = ($1  > $3) ? 1 : 0 >>
	|   	math '<' math											<< $$ = ($1  < $3) ? 1 : 0 >>
	|   	math '>=' math										<< $$ = ($1 >= $3) ? 1 : 0 >>
	|   	math '<=' math										<< $$ = ($1 <= $3) ? 1 : 0 >>
	|   	'-' math       		%prec UMINUS		<< $$ = - $1 >>
	|			'(' math ')'											<< $$ = $2 >>
	|   	NUM       												<< $$ = $1 >>
	|   	IDENT															<< $$ = lookup($1) >>
	|   	set                            		<< $$ = S($1) >>

  /* performs set math on roll results */
set:  	set '&' set												<< $$ = set($1 ∩ $3) >>
	|   	set '|' set												<< $$ = set($1 ∪ $3) >>
	|   	set '&&' set											<< $$ = $1 ∩ $3 >>
	|   	set '||' set											<< $$ = $1 ∪ $3 >>
	|   	'[' set ']'												<< $$ = $2 >>
	|   	func															<< $$ = Z($1) >>

	/* performs functions on roll sets */
func: 	die																<< $$ = R($1) >>
	|   	'{' list '}'											<< $$ = Q($1) >>
	|			func F_ADD a_args									<< $$ = F($2, $1, $2) >>
	|			func F_SUB s_args									<< $$ = F($2, $1, $2) >>
	|			func F_MOD m_args									<< $$ = F($2, $1, $2) >>

	/* Additive arguments */
a_args:	squant ssel fquant 								<< $$ = C($3, $2, $1, NULL) >>
	|			PSELECT fquant										<< $$ = C($2, $1,  1, NULL) >>

	/* Subtractive arguments */
s_args:	squant ssel 											<< $$ = C( 1, $2, $1, NULL) >>
	|			psel 															<< $$ = C( 1, $1,  1, NULL) >>

	/* Modifer arguments */
m_args:	squant ssel fquant								<< $$ = C($3, $2, $1, NULL) >>
	|			squant ssel 'if' COND fquant			<< $$ = C($5, $2, $1, $4) >>
	|			psel fquant												<< $$ = C($3, $2, $1, NULL) >>
	|			psel 'if' COND fquant							<< $$ = C($5, $2, $1, $4) >>

	/* single select */
ssel:		SSELECT														<< $$ = $1 >>
	|			NUM																<< $$ = $1 >>

	/* multi select */
psel:		PSELECT														<< $$ = $1 >>
	|			NUM 's'														<< $$ = $1 >>

	/* selection quantifier */
squant: NUM																<< $$ = $1 >>
	|			SQUANT 														<< $$ = $1 >>
	|																				<< $$ =  1 >>

	/* function quantifier */
fquant:	NUM 'times'												<< $$ = $1 >>
	|			FQUANT														<< $$ = $1 >>
	|																				<< $$ =  1 >>

	/* definition of a die with standard faces */
die: 		DNUM 'd' NUM											<< D($1,  1, $3) >>
	|   	DNUM 'd' '{' nnum RANGE nnum '}'	<< D($1, $4, $6) >>
	|   	'd' NUM														<< D( 1,  1, $2) >>
	|   	'd' '{' nnum RANGE nnum '}'				<< D( 1, $3, $5) >>
 	|			DNUM 'd' '{' list '}'							<< d($1, $4) >>
	|   	'd' '{' list '}'									<< d( 1, $3) >>

	/* create a list of integers */
list: 	nnum															<< $$ = val($1, NULL) >>
	|			nnum ',' list											<< $$ = val($1, $3) >>

	/* optionally negative number */
nnum:		NUM																<< $$ = I($1) >>
	|			'-' NUM														<< $$ = M($1,NULL) >>

	/* Definitions of important terminals */
F_ADD:		append

F_SUB:		drop
	|				count
	|				choose

F_MOD:		reroll

COND:			lower
	|				higher

SSELECT:	highest
	| 			lowest
	| 			random

PSELECT:	unique

FQUANT:		once
	|				twice
	|				thrice

SQUANT:		one
	|				two
	|				three
	|				four
	|				five

OPERATORS 	: + # add roll result
						| - # subtract roll result
						| * # multiply roll result
						| '//' # integer divide roll result
						| % # modulo roll result
						| ^ # exponentiate result
						| & # element-wise intersection of dice set (eliminate duplicates)
						| | # element-wise union of dice set (eliminate duplicates)
						| && # set-wise intersection of dice set (factor duplicates)
						| || # set-wise union of dice set (keep duplicates)
						| =  # equality check roll result ([0] or [1] result)
						| != # inequality check roll result ([0] or [1] result)
						| >  # greater than check roll result ([0] or [1] result)
						| <  # lesser than check roll result ([0] or [1] result)
						| >= # greater than or equal to check roll result ([0] or [1] result)
						| <= # lesser than or equal to roll result ([0] or [1] result)

PRECIDENCE:
	lo	=, !=, >, <, >=, <=
			+, -
			*, '//', %
			^
			&&, ||
	hi	&, |

comments:		block style with '\'


https://pest.rs/
ALPHA = { 'a'..'z' | 'A'..'Z' }
DIGIT = { '0'..'9' }
GROUP = { "slashing" | "fire" | "cold" | "thunder" }
NUM = 	{ DIGIT+ }
NNUM =	{ "-"? ~ NUM}
F_ADD = { "append" }
F_SUB = { "drop" | "count" | "choose" }
F_MOD = { "reroll" }
COND = 	{ "lower" | "higher" }
SSELECT={ "highest" | "lowest" | "random" }
PSELECT={ "unique" }
FQUANT= { "once" | "twice" | "thrice" }
SQUANT= { "one" | "two" | "three" }

IDENT = { ALPHA ~ (ALPHA | DIGIT)+ }

line = 	{ stmt 
		| "@" ~ stmt 
        }

stmt = 	{ group
		| IDENT ~ ":" ~ cond
        | IDENT ~ "=" ~ cond
        }
        
group = { cond
		| cond ~ GROUP
        | cond ~ GROUP ~ group
        }
        
cond = 	{ math
		| math ~ "?" ~ math ~ (";" ~ math)?
		}
        
math =	{ mathsub ~ (mathop ~ mathsub)*
		| "-" ~ math
		| "(" ~ math ~ ")"
        }
       
mathsub={ NUM ~ !"d"
        | IDENT
        | set 
        }
        
mathop= { "+"
		| "-"
        | "*"
        | "//"
        | "%"
        | "^"
        | "=="
        | "!="
        | ">"
        | "<"
        | ">="
        | "<="
		}
        
set = 	{ func ~ (setop ~ set)*
		}
        
setop = { "&"
		| "|"
        | "&&"
        | "||"
		}
        
func = 	{ die ~ funcall*
		| "{" ~ list ~ "}" ~ funcall*
		}
        
funcall={ func ~ F_ADD ~ a_args
		| func ~ F_SUB ~ s_args
        | func ~ F_MOD ~ m_args
		}
        
a_args= { "" }
s_args= { "" }
m_args= { "" }

die = 	{ NUM? ~ "d" ~ NUM
		| NUM? ~ "d" ~ "[" ~ NUM ~ ".." ~ NUM ~ "]"
		| NUM? ~ "d" ~ "{" ~ list ~ "}"
        }
        
list = 	{ NNUM
		| NNUM ~ "," ~ NNUM
        }
